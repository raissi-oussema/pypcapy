# This file is auto-generated to provide type hints for ethernet_message bindings

from typing import Any, Union
import enum

class EtherTypes(enum):
    PYPCAP_ETHERTYPE_IP = 0x0800
    PYPCAP_ETHERTYPE_ARP = 0x0806
    PYPCAP_ETHERTYPE_ETHBRIDGE = 0x6558
    PYPCAP_ETHERTYPE_REVARP = 0x8035
    PYPCAP_ETHERTYPE_AT = 0x809B
    PYPCAP_ETHERTYPE_AARP =0x80F3
    PYPCAP_ETHERTYPE_VLAN =0x8100
    PYPCAP_ETHERTYPE_IPX =0x8137
    PYPCAP_ETHERTYPE_IPV6 =0x86dd
    PYPCAP_ETHERTYPE_LOOPBACK= 0x9000
    PYPCAP_ETHERTYPE_PPPOED =0x8863
    PYPCAP_ETHERTYPE_PPPOES =0x8864
    PYPCAP_ETHERTYPE_MPLS =0x8847
    PYPCAP_ETHERTYPE_PPP =0x880B
    PYPCAP_ETHERTYPE_ROCEV1 =0x8915
    PYPCAP_ETHERTYPE_IEEE_802_1AD =0x88A8
    PYPCAP_ETHERTYPE_WAKE_ON_LAN =0x0842

class DhcpMessageType(enum):
    DHCP_UNKNOWN_MSG_TYPE = 0
    DHCP_DISCOVER = 1
    DHCP_OFFER = 2
    DHCP_REQUEST = 3
    DHCP_DECLINE = 4
    DHCP_ACK = 5
    DHCP_NAK = 6
    DHCP_RELEASE = 7
    DHCP_INFORM = 8

class EthernetHeader:
    @property
    def mac_address_source() -> None: ...
    @mac_address_source.setter
    def mac_address_source(self, arg: str, /) -> None: ...    
    
    @property
    def mac_address_destination() -> None: ...
    @mac_address_source.setter
    def mac_address_destination(self, arg: str, /) -> None: ...
    
    @property
    def ether_type() -> None:...
    @ether_type.setter
    def ether_type(self, arg: EtherTypes, /) -> None: ...

class IPv4Header:
    @property
    def internet_header_length(self) -> int: ...
    @internet_header_length.setter
    def internet_header_length(self, value: int) -> None: ...
    
    @property
    def ip_version(self) -> int: ...
    @ip_version.setter
    def ip_version(self, value: int) -> None: ...
    
    @property
    def type_of_service(self) -> int: ...
    @type_of_service.setter
    def type_of_service(self, value: int) -> None: ...
    
    @property
    def total_length(self) -> int: ...
    @total_length.setter
    def total_length(self, value: int) -> None: ...
    
    @property
    def ip_id(self) -> int: ...
    @ip_id.setter
    def ip_id(self, value: int) -> None: ...
    
    @property
    def fragment_offset(self) -> int: ...
    @fragment_offset.setter
    def fragment_offset(self, value: int) -> None: ...
    
    @property
    def time_to_live(self) -> int: ...
    @time_to_live.setter
    def time_to_live(self, value: int) -> None: ...
    
    @property
    def protocol(self) -> int: ...
    @protocol.setter
    def protocol(self, value: int) -> None: ...
    
    @property
    def header_checksum(self) -> int: ...
    @header_checksum.setter
    def header_checksum(self, value: int) -> None: ...
    
    @property
    def source_ip_address(self) -> str: ...
    @source_ip_address.setter
    def source_ip_address(self, value: str) -> None: ...
    
    @property
    def destination_ip_address(self) -> str: ...
    @destination_ip_address.setter
    def destination_ip_address(self, value: str) -> None: ...

class UdpHeader:
    def __init__(self) -> None: ...
    
    @property
    def port_source(self) -> int: ...
    @port_source.setter
    def port_source(self, value: int) -> None: ...

    @property
    def port_destination(self) -> int: ...
    @port_destination.setter
    def port_destination(self, value: int) -> None: ...

    @property
    def length(self) -> int: ...
    @length.setter
    def length(self, value: int) -> None: ...

    @property
    def header_checksum(self) -> int: ...
    @header_checksum.setter
    def header_checksum(self, value: int) -> None: ...


class DhcpHeader:
    def __init__(self) -> None: ...
    
    @property
    def op_code(self) -> int: ...
    @op_code.setter
    def op_code(self, value: int) -> None: ...

    @property
    def hardware_type(self) -> int: ...
    @hardware_type.setter
    def hardware_type(self, value: int) -> None: ...

    @property
    def hardware_address_length(self) -> int: ...
    @hardware_address_length.setter
    def hardware_address_length(self, value: int) -> None: ...

    @property
    def hops(self) -> int: ...
    @hops.setter
    def hops(self, value: int) -> None: ...

    @property
    def transaction_id(self) -> int: ...
    @transaction_id.setter
    def transaction_id(self, value: int) -> None: ...

    @property
    def seconds_elapsed(self) -> int: ...
    @seconds_elapsed.setter
    def seconds_elapsed(self, value: int) -> None: ...

    @property
    def flags(self) -> int: ...
    @flags.setter
    def flags(self, value: int) -> None: ...

    @property
    def client_ip_address(self) -> str: ...
    @client_ip_address.setter
    def client_ip_address(self, value: str) -> None: ...

    @property
    def your_ip_address(self) -> str: ...
    @your_ip_address.setter
    def your_ip_address(self, value: str) -> None: ...

    @property
    def server_ip_address(self) -> str: ...
    @server_ip_address.setter
    def server_ip_address(self, value: str) -> None: ...

    @property
    def relay_agent_ip_address(self) -> str: ...
    @relay_agent_ip_address.setter
    def relay_agent_ip_address(self, value: str) -> None: ...

    @property
    def client_hardware_address(self) -> str: ...
    @client_hardware_address.setter
    def client_hardware_address(self, value: str) -> None: ...

    @property
    def server_name(self) -> str: ...
    @server_name.setter
    def server_name(self, value: str) -> None: ...

    @property
    def boot_filename(self) -> str: ...
    @boot_filename.setter
    def boot_filename(self, value: str) -> None: ...

    @property
    def magic_number(self) -> int: ...
    @magic_number.setter
    def magic_number(self, value: int) -> None: ...

class EthernetMessage:
    def __init__(self, mac_address_source: str, mac_address_destination: str, ether_type: int) -> None: ...
    
    @property
    def ethernet_header(self) -> EthernetHeader: ... 
    @ethernet_header.setter
    def ethernet_header (self, value:EthernetHeader) -> None : ...
    
    
    def send(self):...
    def set_all_bytes(self, bytes : bytearray):...
    def get_all_bytes(self) -> bytes:...
    def __repr__(self) -> str:...

class DhcpMessage :
    @property
    def ethernet_header(self) -> EthernetHeader: ...
    @ethernet_header.setter
    def ethernet_header (self, value:EthernetHeader) -> None : ...
    
    @property
    def ipv4_header(self) -> IPv4Header: ...
    @ipv4_header.setter
    def ipv4_header (self, value:IPv4Header) -> None : ...
    
    @property
    def udp_header(self) -> UdpHeader: ...
    @udp_header.setter
    def udp_header (self, value:UdpHeader) -> None : ...

    @property
    def dhcp_header(self) -> DhcpHeader: ...
    @dhcp_header.setter
    def dhcp_header (self, value:DhcpHeader) -> None : ...
    
    @property
    def message_type(self) -> DhcpMessageType: ...
    @message_type.setter
    def message_type (self, value:DhcpMessageType) -> None : ...
    
    @property
    def compute_before_send(self) -> bool: ...
    @compute_before_send.setter
    def compute_before_send (self, value:bool) -> None : ...
    
    
    def send(self) : ...
    def get_all_bytes(self) -> bytes : ...
    def get_bytes() -> bytes : ...
    def add_option(self, option_type:int, option_value:list) -> None : ...
    def has_option(self, option_type:int) -> bool : ...
    def get_option_data(self, option_type:int) -> list : ...
    def print_packet_as_bytes_stream(self) -> None : ...
    def print_payload_as_bytes_stream(self) -> None : ...
    def __repr__(self) -> str:...

    